package com.rajendra.pkg1

object Samples {
  def main(args:Array[String]){
    val filesHere = (new java.io.File(".")).listFiles
    for(file <- filesHere){
      println(file)
    }
    
    for(file <- filesHere)
      if(file.isDirectory){
        println("Dir"+file)
      }
    
    val dirs = for(file<- filesHere if file.isDirectory()) yield file
    
    for(i<- 0 to 5){
      println("iteration "+i)
    }    
  }
}

object Closure{
  def main(args:Array[String]){
    //Closure example
    var factor = 3
    val multiplier = (i:Int)=> i*factor //factor defined in enclosing scope
    val l1 = List(1,2,3,4,5) map multiplier
    
    factor = 10
    val l2 = List(1,2,3,4,5) map multiplier
    println(l1)
    println(l2)
  }
}

/*object Currying {
  def multiplier(factor: Int)(i: Int) = factor * i
  val byFour = multiplier(4)(_)
  val byTen = multiplier(10)(_)

  def add(x: Int, y: Int) = x + y
  // make existing functions curried
  val addCurried = Function.curried(add _)
  val incr = addCurried(1)(_)

  def times(i: Int)(block: => Unit) {
    (0 until i).foreach(_ => block)
  }

  def main(args: Array[String]) {
    println(multiplier(5)(3))
    println(byTen(5))

    times(5) {
      println("Scala is cool")
    }
  }
}*/

object PatternMatching{
  def describe(x: Any) = x match {
    case 5 => "five"
    case true => "true"
    case "ping" => "pong"
    case x: String => "a string"
    case Nil => "empty list"
    case (a: Int, b: Int) => "a tuple of ints"
    case List(_, 1, _) => "a list with 3 elems, with a 1 as second element"
    case _ => "something else"
  }
  
  case class Point(x:Double, y:Double)
  abstract class Shape()
  case class Circle(center:Point, radius:Double) extends Shape()
  
}




















